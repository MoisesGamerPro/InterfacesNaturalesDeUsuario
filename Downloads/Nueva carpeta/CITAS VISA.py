# Generated by Selenium IDE
import pytest
import time
import json
import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.select import Select
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

class TestVisaVerification():
    def setup_method(self, method):
        options = Options()
        # options.add_argument('--headless')
        # options.add_argument('--disable-gpu')
        self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_visaVerification(self):
        try:
            # 1 | open | /es-ar/niv/users/sign_in |
            print('Cargando sitio')
            self.driver.get("https://ais.usvisa-info.com/es-mx/niv/users/sign_in")
            # 2 | setWindowSize | 1512x871 |
            # self.driver.set_window_size(1280, 720)
            # 3 | type | id=user_email | reemplazar 'email' con el email real
            self.driver.find_element(By.ID, "user_email").send_keys("moysesmvp@gmail.com")
            # 4 | type | id=user_password | reemplazar 'password' con el password real
            self.driver.find_element(By.ID, "user_password").send_keys("124564978VCuevas")
            # 5 | click | css=.icheckbox |
            self.driver.find_element(By.CSS_SELECTOR, ".icheckbox").click()
            # 6 | click | name=commit |
            self.driver.find_element(By.NAME, "commit").click()
            print('Sesión iniciada')
            time.sleep(5)
            # 7 | click | linkText=Continuar |
            # self.driver.find_element(By.LINK_TEXT, "Continuar").click()
            # 8 | open | https://ais.usvisa-info.com/es-mx/niv/schedule/56351245/appointment |
            self.driver.get("https://ais.usvisa-info.com/es-mx/niv/schedule/56351245/appointment")
            time.sleep(5)

            # Buscar la primera cita más cercana en cada consulado
            select_element = Select(self.driver.find_element(By.ID, "appointments_consulate_appointment_facility_id"))
            for option in select_element.options:
                if option.get_attribute('value'):  # Ignorar la opción vacía
                    select_element.select_by_value(option.get_attribute('value'))
                    consulate_name = option.text
                    # print(f"Buscando en: {consulate_name}")
                    time.sleep(5)  # Esperar a que la página se actualice
                    self.driver.find_element(By.ID, "appointments_consulate_appointment_date").click()

                    element = None
                    max_year = 2028
                    attempt_count = 0
                    max_attempts = 30

                    while element is None and attempt_count < max_attempts:
                        element = 'found'
                        # print(f"Intento número: {attempt_count}")
                        try:
                            # 11 | click | css=.ui-icon-circle-triangle-e |
                            self.driver.find_element(By.CSS_SELECTOR, ".ui-icon-circle-triangle-e").click()
                            # 12 | click | xpath=//td[@data-handler='selectDay']/a |
                            self.driver.find_element(By.XPATH, "//td[@data-handler='selectDay']/a").click()
                        except:
                            element = None
                            attempt_count += 1

                    if attempt_count >= max_attempts:
                        # print(f"Se alcanzaron {max_attempts} intentos en {consulate_name}.")
                        print(f"Consulado: {consulate_name} Fecha: {element}")
                        time.sleep(2)
                        continue

                    selected_date_element = self.driver.find_element(By.ID, "appointments_consulate_appointment_date")
                    selected_date = selected_date_element.get_attribute('value')

                    if selected_date:
                        selected_year = datetime.datetime.strptime(selected_date, '%Y-%m-%d').year
                        if selected_year >= max_year:
                            print(f"No se encontraron citas antes del año {max_year} en el consulado: {consulate_name}")
                            break

                    print(f"Consulado: {consulate_name} Fecha: {selected_date}")
                    time.sleep(2)

        except Exception as e:
            print(f"Error: {e}")
        finally:
            # self.teardown_method('get')
            print("Busqueda terminada")

obj = TestVisaVerification()
obj.setup_method('get')
obj.test_visaVerification()
# obj.teardown_method('get')
